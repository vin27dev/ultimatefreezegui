/*
 * This file is part of UltimateFreezeGUI, licensed under the MIT License.
 *
 *  Copyright (c) vin27dev (Luck) <vin27dev@gmail.com>
 *  Copyright (c) contributors
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

package it.vin27dev.ultimatefreezegui.listeners;

import it.vin27dev.ultimatefreezegui.UltimateFreezeGUI;
import it.vin27dev.ultimatefreezegui.utility.ChatUtility;
import it.vin27dev.ultimatefreezegui.utility.GUI;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerQuitEvent;

public class ListenerProvider implements Listener {

    private UltimateFreezeGUI ultimateFreezeGUI;

    public ListenerProvider(UltimateFreezeGUI ultimateFreezeGUI) {
        this.ultimateFreezeGUI = ultimateFreezeGUI;
    }

    private GUI gui;

    @EventHandler
    private void onInvClick(InventoryClickEvent e) {

        if(e.getClickedInventory() == null) {
            return;
        }
        if(e.getView().getTitle().equals(ChatUtility.color(ultimateFreezeGUI.getConfig().getString("GUI.inv-name")))) {
            e.setCancelled(true);
            if(e.getCurrentItem() == null || !e.getCurrentItem().hasItemMeta()) {
                return;
            }

            if(e.getCurrentItem().getItemMeta().getDisplayName().equals(ChatUtility.color(ultimateFreezeGUI.getConfig().getString("GUI.admit-item-name")))) {
                Bukkit.dispatchCommand(ultimateFreezeGUI.getServer().getConsoleSender(), ChatUtility.color(ultimateFreezeGUI.getConfig().getString("General.admit-or-leave-command").replace("{target}", e.getWhoClicked().getName())));
                ultimateFreezeGUI.frozen.remove(e.getWhoClicked().getUniqueId());
                e.getWhoClicked().closeInventory();
            }
        }
    }

    @EventHandler
    private void onInvClose(InventoryCloseEvent e) {
        Player p = (Player) e.getPlayer();
        if(e.getView().getTitle().equals(ChatUtility.color(ultimateFreezeGUI.getConfig().getString("GUI.inv-name")))) {
            if (ultimateFreezeGUI.frozen.contains(p.getUniqueId())) {
                Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(ultimateFreezeGUI, new Runnable() {
                    @Override
                    public void run() {
                        gui = new GUI(ultimateFreezeGUI);
                        gui.setupInventory(p);
                    }
                }, 1);
            }
        }
    }

    @EventHandler
    private void onMove(PlayerMoveEvent e) {
        if(ultimateFreezeGUI.frozen.contains(e.getPlayer().getUniqueId())) {
            e.setCancelled(true);
        }
    }

    @EventHandler
    private void onPlace(BlockPlaceEvent e) {
        if(ultimateFreezeGUI.frozen.contains(e.getPlayer().getUniqueId())) {
            e.setCancelled(true);
        }
    }

    @EventHandler
    private void onBreak(BlockBreakEvent e) {
        if(ultimateFreezeGUI.frozen.contains(e.getPlayer().getUniqueId())) {
            e.setCancelled(true);
        }
    }

    @EventHandler
    private void onInteract(PlayerInteractEvent e) {
        if(ultimateFreezeGUI.frozen.contains(e.getPlayer().getUniqueId())) {
            e.setCancelled(true);
        }
    }

    @EventHandler
    private void onDrop(PlayerDropItemEvent e) {
        if(ultimateFreezeGUI.frozen.contains(e.getPlayer().getUniqueId())) {
            e.setCancelled(true);
        }
    }

    @EventHandler
    private void onQuit(PlayerQuitEvent e) {
        if(ultimateFreezeGUI.frozen.contains(e.getPlayer().getUniqueId())) {
            Bukkit.dispatchCommand(ultimateFreezeGUI.getServer().getConsoleSender(), ChatUtility.color(ultimateFreezeGUI.getConfig().getString("General.admit-or-leave-command").replace("{target}", e.getPlayer().getName())));
            ultimateFreezeGUI.frozen.remove(e.getPlayer().getUniqueId());
        }
    }

    @EventHandler
    public void onHit (EntityDamageEvent event){
        if (event.getEntity() instanceof Player) {
            if(ultimateFreezeGUI.frozen.contains(event.getEntity().getUniqueId())) {
                event.setCancelled(true);
            }
        }
    }
}
